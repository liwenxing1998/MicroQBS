package com.phlink.bus.api.common.service.impl;import com.alibaba.fastjson.JSON;import com.phlink.bus.api.common.service.MqService;import com.phlink.bus.common.Constants;import com.phlink.bus.core.model.JiGuangPushBean;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.amqp.core.Message;import org.springframework.amqp.core.MessageBuilder;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.HashMap;import java.util.Map;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-05-31 11:43 **/@Slf4j@Servicepublic class MqServiceImpl implements MqService {    @Autowired    private RabbitTemplate rabbitTemplate;    @Override    public void sendCaptcha(String mobile) {        Map<String, String> content = new HashMap<>();        content.put("type", Constants.MSG_TYPE_CAPTCHA);        content.put("mobile", mobile);//        Message msg = MessageBuilder.withBody(JSON.toJSONBytes(content)).setExpiration("30000").build();//        rabbitTemplate.send(Constants.MQ_EXCHANGE_SEND_SMS, Constants.MQ_ROUTE_SEND_SMS, msg);//        log.info("[sendCaptcha] 发送验证码 {}", JSON.toJSONString(content));    }    @Override    public void pushMsg(JiGuangPushBean pushContent) {        if (pushContent == null) {            return;        }        if (pushContent.getPushBean() == null) {            return;        }        if (StringUtils.isBlank(pushContent.getPushBean().getAlert())) {            return;        }        String content = JSON.toJSONString(pushContent);        Message msg = MessageBuilder.withBody(content.getBytes()).setExpiration("30000").build();        rabbitTemplate.send(Constants.MQ_EXCHANGE_SEND_PUSH, Constants.MQ_ROUTE_SEND_PUSH, msg);        log.info("[pushMsg] 推送消息 {}", JSON.toJSONString(pushContent));    }    @Override    public void sendSmsMsg(String msgType, String mobile) {        Map<String, String> content = new HashMap<>();        content.put("type", msgType);        content.put("mobile", mobile);//        Message msg = MessageBuilder.withBody(JSON.toJSONBytes(content)).setExpiration("30000").build();//        rabbitTemplate.send(Constants.MQ_EXCHANGE_SEND_SMS, Constants.MQ_ROUTE_SEND_SMS, msg);//        log.info("[sendSmsMsg] 发送短信消息 {}", JSON.toJSONString(content));    }}
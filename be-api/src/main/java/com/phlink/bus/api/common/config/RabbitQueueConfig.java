package com.phlink.bus.api.common.config;import com.phlink.bus.common.Constants;import org.springframework.amqp.core.*;import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;import org.springframework.amqp.rabbit.connection.ConnectionFactory;import org.springframework.amqp.rabbit.core.RabbitAdmin;import org.springframework.amqp.rabbit.core.RabbitMessagingTemplate;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.amqp.support.converter.ContentTypeDelegatingMessageConverter;import org.springframework.amqp.support.converter.MessageConverter;import org.springframework.beans.factory.annotation.Value;import org.springframework.beans.factory.config.ConfigurableBeanFactory;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Scope;/** * @Program: bus * @Description: * @Author: wen * @Create: 2018-05-31 17:34 **/@Configurationpublic class RabbitQueueConfig {    @Value("${spring.rabbitmq.host}")    private String host;    @Value("${spring.rabbitmq.port}")    private String port;    @Value("${spring.rabbitmq.username}")    private String username;    @Value("${spring.rabbitmq.password}")    private String password;    @Value("${spring.rabbitmq.publisherConfirms}")    private Boolean publisherConfirms;    @Value("${spring.rabbitmq.virtualHost}")    private String virtualHost;    @Bean    public ConnectionFactory connectionFactory(){        CachingConnectionFactory connectionFactory = new CachingConnectionFactory();        connectionFactory.setAddresses(host+":"+port);        connectionFactory.setUsername(username);        connectionFactory.setPassword(password);        connectionFactory.setPublisherConfirms(publisherConfirms);        connectionFactory.setPublisherReturns(true);        connectionFactory.setVirtualHost(virtualHost);        return connectionFactory;    }    @Bean    RabbitAdmin rabbitAdmin(ConnectionFactory connectionFactory) {        return new RabbitAdmin(connectionFactory);    }    @Bean    public Queue smsSenderQueue(RabbitAdmin rabbitAdmin) {        Queue queue = new Queue(Constants.MQ_QUEUE_SEND_SMS, true);        rabbitAdmin.declareQueue(queue);        return queue;    }    @Bean    public TopicExchange smsSenderTopicExchange(RabbitAdmin rabbitAdmin) {        TopicExchange topicExchange = new TopicExchange(Constants.MQ_EXCHANGE_SEND_SMS);        rabbitAdmin.declareExchange(topicExchange);        return topicExchange;    }    @Bean    public Binding bindingSmsSender(Queue smsSenderQueue, TopicExchange smsSenderTopicExchange, RabbitAdmin rabbitAdmin) {        Binding binding = BindingBuilder.bind(smsSenderQueue).to(smsSenderTopicExchange).with(Constants.MQ_ROUTE_SEND_SMS);        rabbitAdmin.declareBinding(binding);        return binding;    }    @Bean    public Queue iotDeviceQueue(RabbitAdmin rabbitAdmin) {        Queue queue = new Queue(Constants.MQ_QUEUE_SEND_EWATCH);        rabbitAdmin.declareQueue(queue);        return queue;    }    @Bean    public TopicExchange iotDeviceTopicExchange(RabbitAdmin rabbitAdmin){        TopicExchange topicExchange=new TopicExchange(Constants.MQ_EXCHANGE_SEND_EWATCH);        rabbitAdmin.declareExchange(topicExchange);        return topicExchange;    }    @Bean    public Binding bindingIotDevice(Queue iotDeviceQueue, TopicExchange iotDeviceTopicExchange, RabbitAdmin rabbitAdmin) {        Binding binding = BindingBuilder.bind(iotDeviceQueue).to(iotDeviceTopicExchange).with(Constants.MQ_ROUTE_SEND_EWATCH);        rabbitAdmin.declareBinding(binding);        return binding;    }    @Bean    public Queue pushDeviceQueue(RabbitAdmin rabbitAdmin) {        Queue queue = new Queue(Constants.MQ_QUEUE_SEND_PUSH);        rabbitAdmin.declareQueue(queue);        return queue;    }    @Bean    public TopicExchange pushTopicExchange(RabbitAdmin rabbitAdmin){        TopicExchange topicExchange=new TopicExchange(Constants.MQ_EXCHANGE_SEND_PUSH);        rabbitAdmin.declareExchange(topicExchange);        return topicExchange;    }    @Bean    public Binding bindingPush(Queue pushDeviceQueue, TopicExchange pushTopicExchange, RabbitAdmin rabbitAdmin) {        Binding binding = BindingBuilder.bind(pushDeviceQueue).to(pushTopicExchange).with(Constants.MQ_ROUTE_SEND_PUSH);        rabbitAdmin.declareBinding(binding);        return binding;    }//    @Bean("rabbitProtoMessagingTemplate")//    public RabbitMessagingTemplate rabbitProtoMessagingTemplate(RabbitTemplate rabbitTemplate) {//        rabbitTemplate.setMessageConverter(new ProtobufMessageConverter());//        RabbitMessagingTemplate rabbitMessagingTemplate = new RabbitMessagingTemplate();//        rabbitMessagingTemplate.setRabbitTemplate(rabbitTemplate);//        return rabbitMessagingTemplate;//    }////    @Bean//    public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {//        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();//        factory.setConnectionFactory(connectionFactory);//        factory.setMessageConverter(new ProtobufMessageConverter());//        factory.setAcknowledgeMode(AcknowledgeMode.AUTO);//        return factory;//    }    @Bean    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)    public RabbitTemplate rabbitTemplate(){        RabbitTemplate template = new RabbitTemplate(connectionFactory());        return template;    }    @Bean    public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory, MessageConverter messageConverter) {        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();        factory.setConnectionFactory(connectionFactory);        factory.setMessageConverter(messageConverter);        return factory;    }    @Bean    public MessageConverter messageConverter() {        return new ContentTypeDelegatingMessageConverter(new ContentTypeDelegatingMessageConverter());    }}
package com.phlink.bus.api.trajectory.service.impl;

import com.alibaba.fastjson.JSON;
import com.goebl.simplify.Point;
import com.goebl.simplify.Simplify;
import com.phlink.bus.api.ApiApplication;
import com.phlink.bus.api.common.exception.BusApiException;
import com.phlink.bus.api.trajectory.domain.Trajectory;
import com.phlink.bus.api.trajectory.domain.TrajectoryPoint;
import com.phlink.bus.api.trajectory.service.ITrajectoryService;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.List;

@Slf4j
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = ApiApplication.class)
@ActiveProfiles("test")
public class TrajectoryServiceImplTest {

    @Autowired
    private ITrajectoryService trajectoryService;

    @Test
    public void testDetail() {
        Long trajectoryId = 1192011111944171521L;
        try {
            Trajectory trajectory = trajectoryService.detail(trajectoryId, true);
            log.info("trajectory point === {}", JSON.toJSONString(trajectory.getSimplePoints()));
        } catch (BusApiException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testSimple2() {
        String points = "[[116.616325,40.19964,0.0],[116.616,40.19829,0.0],[116.61558,40.196636,0.0],[116.61533,40.195183,0.0],[116.615135,40.193825,0.0],[116.61494,40.1926,0.0],[116.61469,40.190987,0.0],[116.61453,40.18976,0.0],[116.61432,40.18826,0.0],[116.61413,40.18716,0.0],[116.613945,40.185966,0.0],[116.61373,40.184635,0.0],[116.6136,40.1836,0.0],[116.61344,40.18247,0.0],[116.61343,40.18134,0.0],[116.61333,40.180695,0.0],[116.61337,40.17967,0.0],[116.61357,40.17837,0.0],[116.6138,40.177113,0.0],[116.61399,40.17602,0.0],[116.61416,40.17457,0.0],[116.61442,40.173138,0.0],[116.61468,40.171745,0.0],[116.61485,40.170624,0.0],[116.61505,40.16981,0.0],[116.615326,40.168697,0.0],[116.615555,40.167812,0.0],[116.6159,40.166588,0.0],[116.61624,40.165344,0.0],[116.6166,40.163982,0.0],[116.61666,40.163765,0.0],[116.61666,40.163765,0.0],[116.61653,40.16373,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616745,40.1638,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.616516,40.16369,0.0],[116.61666,40.16382,0.0],[116.61655,40.164314,0.0],[116.61621,40.16565,0.0],[116.61593,40.167084,0.0],[116.61564,40.168446,0.0],[116.61531,40.16988,0.0],[116.61525,40.170193,0.0],[116.61525,40.170193,0.0],[116.61525,40.170193,0.0],[116.61512,40.17091,0.0],[116.61491,40.171925,0.0],[116.61474,40.172768,0.0],[116.61453,40.173748,0.0],[116.61429,40.174908,0.0],[116.614204,40.17566,0.0],[116.614075,40.176537,0.0],[116.61388,40.17775,0.0],[116.61376,40.17846,0.0],[116.613655,40.17898,0.0],[116.61362,40.179466,0.0],[116.613525,40.18029,0.0],[116.61349,40.18102,0.0],[116.61349,40.181988,0.0],[116.6136,40.183304,0.0],[116.61383,40.184826,0.0],[116.61406,40.18632,0.0],[116.614235,40.187706,0.0],[116.61443,40.188976,0.0],[116.61462,40.19038,0.0],[116.614876,40.191975,0.0],[116.61502,40.193268,0.0],[116.61522,40.194565,0.0],[116.61541,40.195755,0.0],[116.61556,40.196568,0.0],[116.61592,40.19794,0.0],[116.61581,40.19873,0.0],[116.615005,40.19862,0.0],[116.61419,40.198658,0.0],[116.6132,40.198536,0.0],[116.61163,40.19839,0.0],[116.60997,40.19821,0.0],[116.60815,40.198006,0.0],[116.60685,40.1979,0.0],[116.605316,40.1978,0.0],[116.60358,40.19763,0.0],[116.60213,40.197514,0.0],[116.600136,40.197353,0.0],[116.599045,40.197266,0.0],[116.59794,40.19717,0.0],[116.59742,40.19713,0.0],[116.59692,40.19828,0.0],[116.59657,40.199406,0.0],[116.59644,40.19992,0.0],[116.59618,40.200832,0.0],[116.595665,40.202488,0.0],[116.59512,40.20432,0.0],[116.5948,40.205418,0.0],[116.594444,40.206635,0.0],[116.59397,40.208244,0.0],[116.59371,40.20968,0.0],[116.59347,40.211098,0.0],[116.5934,40.21156,0.0],[116.59327,40.211975,0.0],[116.59222,40.211903,0.0],[116.59093,40.211773,0.0],[116.588974,40.21156,0.0],[116.58592,40.21126,0.0],[116.58428,40.211113,0.0],[116.582184,40.210938,0.0],[116.58072,40.210793,0.0],[116.58041,40.210346,0.0],[116.580605,40.209206,0.0],[116.58088,40.207806,0.0],[116.58072,40.20733,0.0],[116.580666,40.20716,0.0],[116.58049,40.20709,0.0],[116.58049,40.20709,0.0],[116.58049,40.20709,0.0],[116.58049,40.20709,0.0],[116.58049,40.20709,0.0]]";
        Simplify<Point> simplify = new Simplify<>(new TrajectoryPoint[0]);

        List<float[]> pointsList = JSON.parseArray(points, float[].class);
        Point[] allPoints = new Point[pointsList.size()];
        for (int i = 0; i < pointsList.size(); i++) {
            float[] p = pointsList.get(i);
            TrajectoryPoint tp = new TrajectoryPoint(p[0], p[1]);
            allPoints[i] = tp;
        }
        double tolerance = 0.0001;
        boolean highQuality = true; // Douglas-Peucker, false for Radial-Distance

        Point[] lessPoints = simplify.simplify(allPoints, tolerance, highQuality);
        log.info("simple point === {}", JSON.toJSONString(lessPoints));
    }

}